// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import React, { useState, useEffect, useRef } from 'react';
import { useOutlet, history } from 'dumi';
import { warning } from '/Users/hotoo/workbench/github.com/hotoo/pinyin/node_modules/.pnpm/rc-util@5.44.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/rc-util';
import { SiteContext, type ISiteContext } from '/Users/hotoo/workbench/github.com/hotoo/pinyin/node_modules/.pnpm/dumi@2.4.21_@babel+core@7.27.1_@swc+helpers@0.5.1_@types+node@22.15.17_eslint@8.57.1_jest@27._k52o7bsjhc7apl3at7eg3h22hq/node_modules/dumi/dist/client/theme-api/context.js';
import { components } from '../meta/atoms';
import { locales } from '../locales/config';



const entryExports = {
};

// Static content
const pkg = {"name":"pinyin","description":"汉语拼音转换工具。","version":"4.0.0-alpha.2","license":"MIT","repository":{"type":"git","url":"https://github.com/hotoo/pinyin.git"},"author":"闲耘 <hotoo.cn@gmail.com>"};
const historyType = "browser";
const hostname = undefined;
const themeConfig = {"logo":"https://gw.alipayobjects.com/mdn/rms_f6322a/afts/img/A*bGz9QbNudekAAAAAAAAAAAAAARQnAQ","title":"pīnyīn","footer":"Copyright © 2025 | Powered by <a href=\"https://d.umijs.org\" target=\"_blank\" rel=\"noreferrer\">dumi</a>","prefersColor":{"default":"light","switch":true},"nprogress":true,"lastUpdated":true,"nav":{"zh-CN":[{"title":"首页","link":"/"},{"title":"API文档","link":"/api/v3/"},{"title":"演示文档","link":"/example/"},{"title":"更新历史","link":"/CHANGELOG/"}],"en-US":[{"title":"Home","link":"/en-US/"},{"title":"API","link":"/en-US/api/v3/"},{"title":"Example","link":"/en-US/example/"},{"title":"CHANGELOG","link":"/CHANGELOG/"}],"ko-KR":[{"title":"Home","link":"/ko-KR/"},{"title":"API","link":"/ko-KR/api/v3/"},{"title":"Example","link":"/ko-KR/example/"},{"title":"CHANGELOG","link":"/CHANGELOG/"}]},"sourceLink":"https://github.com/hotoo/pinyin/tree/feat%2Frollup/{fileName}#L{line}","editLink":"https://github.com/hotoo/pinyin/edit/feat%2Frollup/{filename}"};
const _2_level_nav_available = true;

export default function DumiContextWrapper() {
  const outlet = useOutlet();
  const [loading, setLoading] = useState(false);
  const prev = useRef(history.location.pathname);

  useEffect(() => {
    return history.listen((next) => {
      if (next.location.pathname !== prev.current) {
        prev.current = next.location.pathname;

        // scroll to top when route changed
        document.documentElement.scrollTo(0, 0);
      }
    });
  }, []);

  const context: ISiteContext = React.useMemo(() => {
    const ctx = {
      pkg,
      historyType,
      entryExports,
      demos: null,
      components,
      locales,
      loading,
      setLoading,
      hostname,
      themeConfig,
      _2_level_nav_available,
    };

    // Proxy do not warning since `Object.keys` will get nothing to loop
    Object.defineProperty(ctx, 'demos', {
      get: () => {
        warning(false, '`demos` return empty in latest version, please use `useDemo` instead.');
        return {};
      },
    });

    return ctx;
  }, [
    pkg,
    historyType,
    entryExports,
    components,
    locales,
    loading,
    setLoading,
    hostname,
    themeConfig,
    _2_level_nav_available,
  ]);

  return (
    <SiteContext.Provider value={context}>
      {outlet}
    </SiteContext.Provider>
  );
}
